from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from scipy.io import arff
import pandas as pd
import numpy as np
import warnings

# Custom function for feature selection based on correlation
def select_features_by_correlation(X, y, threshold):
    # Convert y to pandas Series if it's not already
    y = pd.Series(y)

    # Check if X is a DataFrame or numpy array
    if isinstance(X, pd.DataFrame):
        feature_corr = X.corrwith(y)
    elif isinstance(X, np.ndarray):
        feature_corr = pd.DataFrame(X).corrwith(y)
    else:
        raise TypeError("X must be a pandas DataFrame or numpy array")

    selected_features = feature_corr[abs(feature_corr) > threshold].index.tolist()
    return X[:, selected_features]

# List of ARFF files
arff_files = ['CM1.arff', 'JM1.arff', 'KC1.arff', 'MC1.arff', 'MW1.arff', 'PC1.arff', 'PC2.arff', 'PC3.arff', 'PC4.arff', 'PC5.arff']

# Suppress warnings
warnings.simplefilter("ignore")

for arff_file in arff_files:
    # Load ARFF files
    data, meta = arff.loadarff(arff_file)
    df = pd.DataFrame(data)

    # Identify the target column (assuming it is the last column)
    target_column = df.columns[-1]

    # Check if the dataset has enough samples
    if df.shape[0] < 2:
        print(f"Skipping {arff_file} due to insufficient samples.")
        continue

    # Check if the target column contains non-numeric values
    if not pd.api.types.is_numeric_dtype(df[target_column]):
        # Encode non-numeric labels
        label_encoder = LabelEncoder()
        df[target_column] = label_encoder.fit_transform(df[target_column])

    # Extract features and labels
    X = df.drop(columns=target_column).values
    y = df[target_column].astype(int).values

    # Split the data into training and testing sets
    if df.shape[0] > 2:  # Check if there are enough samples for splitting
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Standardize features
        scaler = StandardScaler()
        X_train = scaler.fit_transform(X_train)
        X_test = scaler.transform(X_test)

        # Feature selection using correlation
        selected_threshold = 0.1  # Set the threshold for correlation
        X_train_selected = select_features_by_correlation(X_train, y_train, selected_threshold)
        X_test_selected = select_features_by_correlation(X_test, y_test, selected_threshold)

        # Get the indices of the selected features
        valid_indices = np.where(np.abs(X_train_selected).sum(axis=0) > 0)[0]
        print("DataFrame shape:", df.shape)
        print("Maximum index in valid_indices:", np.max(valid_indices))
        selected_feature_indices = [i for i in valid_indices]

        # Extract the selected features from the original DataFrame
        selected_features_df = df.iloc[:, selected_feature_indices]

        # Add the target column back to selected features
        selected_features_df[target_column] = df[target_column]

        # Define the ARFF header with attributes and data name
        arff_header = '''@relation SelectedFeatures
'''

        # Add attributes to the ARFF header based on selected features
        for column in selected_features_df.columns[:-1]:
            arff_header += f"@attribute {column} numeric\n"

        # Map numeric values to Y/N for the target column
        unique_labels = selected_features_df[target_column].unique()
        label_mapping = {label: 'Y' if label == 1 else 'N' for label in unique_labels}
        arff_header += f"@attribute {target_column} {{Y,N}}\n\n@data\n"

        # Convert the DataFrame to ARFF format
        arff_data = arff_header + selected_features_df.replace({target_column: label_mapping}).to_csv(index=False, header=False)

        # Write ARFF data to a file
        with open(f'selected_features_correlation_{arff_file}', 'w') as arff_file_selected:
            arff_file_selected.write(arff_data)

print("Selected features using correlation exported to ARFF format successfully.")
